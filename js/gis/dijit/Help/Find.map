{"version":3,"file":"Find.js","sources":["Find.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","domConstruct","lang","array","on","keys","domStyle","Memory","OnDemandGrid","Selection","Keyboard","ColumnResizer","GraphicsLayer","symbolUtils","graphicsUtils","FindTask","FindParameters","Extent","FindTemplate","i18n","widgetsInTemplate","templateString","baseClass","spatialReference","showOptionsButton","zoomOptions","select","deselect","defaultResultsSymbols","point","type","style","size","color","angle","xoffset","yoffset","outline","width","polyline","polygon","defaultSelectionSymbols","postCreate","this","inherited","arguments","set","optionsDropDownDijit","domNode","initializeGlobalVariables","addKeyUpHandlerToSearchInput","initializeQueries","updateSearchPrompt","queryIdx","currentQueryEventHandlers","gridColumns","selectionMode","zoomExtentFactor","map","wkid","pointExtentSize","own","searchTextDijit","hitch","evt","keyCode","ENTER","search","k","queryLen","queries","length","id","querySelectDom","display","queryStore","data","querySelectDijit","userInputIsInvalid","displayInvalidUserInputMessage","queryConfigurationIsInvalid","displayInvalidQueryConfigurationMessage","createOrResetResultsGrid","displayFindMessage","searching","executeFindTask","url","getQueryInput","query","findParams","getFindParams","findTask","execute","showResults","searchText","get","searchFields","layerIds","userInput","userInputLessThanMinLength","queryInput","minChars","message","empty","findResultsNode","innerHTML","returnGeometry","layerDefinitions","layerDefs","contains","containsSearchText","checked","outSpatialReference","resultsGrid","createResultsStore","createResultsGrid","attachStandardEventHandlersToResultsGrid","clearResultsGrid","clearFeatures","resetResultsGridColumns","resetResultsGridSort","resetGridSelectionMode","attachCustomEventHandlersToResultsGrid","resultsStore","idProperty","Grid","cellNavigation","showHeader","store","findResultsGrid","startup","columns","layerName","foundFieldName","value","Array","filter","column","visible","setColumns","sort","attribute","descending","forEach","handler","handle","remove","queryEventHandlers","customGridEventHandlers","event","results","resultText","noResultsLabel","s","resultsLabel","multipleResultsSuffix","labelPrefix","labelSuffix","createGraphicsLayerAndSymbols","parseGridColumnProperties","addResultsToGraphicsLayer","zoomToGraphics","graphicsLayer","graphics","showResultsGrid","createGraphicsLayer","graphicsSymbols","createGraphicsSymbols","title","addLayer","onGraphicsLayerClick","zoomOnSelect","row","graphic","storeid","focus","element","resultSymbolDefinitions","selectionSymbolDefinitions","graphicSymbols","mixin","resultsSymbols","fromJson","selectionSymbols","result","shouldGetValueFromAttributes","field","hasOwnProperty","feature","attributes","shouldGetValueFromGetFunction","unique","setGraphicSymbol","add","setData","refresh","lyrDisplay","styleColumn","hideGrid","onResultsGridSelect","rows","getDojoShape","moveToFront","redraw","zoomToSelectedGraphics","onResultsGridDeselect","onResultsGridRowClick","setTimeout","selection","isSelected","symbol","geometry","setSymbol","selectedGraphics","push","zoomExtent","graphicsExtent","getExtentFromGraphic","setMapExtent","extent","getExtentFromPoint","sz","pointGeometry","xmin","x","ymin","y","xmax","ymax","setExtent","expand","clearResults","searchFormDijit","reset","setValue","resultStore","clear","_onQueryChange","prompt","placeholder","onZoomOptionsSelectChange","onZoomOptionsDeselectChange"],"mappings":"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","sourcesContent":["define(\n    [\n        'dojo/_base/declare',\n        'dijit/_WidgetBase',\n        'dijit/_TemplatedMixin',\n        'dijit/_WidgetsInTemplateMixin',\n        'dojo/dom-construct',\n        'dojo/_base/lang',\n        'dojo/_base/array',\n        'dojo/on',\n        'dojo/keys',\n        'dojo/dom-style',\n        'dojo/store/Memory',\n        'dgrid/OnDemandGrid',\n        'dgrid/Selection',\n        'dgrid/Keyboard',\n        'dgrid/extensions/ColumnResizer',\n        'esri/layers/GraphicsLayer',\n        'esri/symbols/jsonUtils',\n        'esri/graphicsUtils',\n        'esri/tasks/FindTask',\n        'esri/tasks/FindParameters',\n        'esri/geometry/Extent',\n        'dojo/text!./Find/templates/Find.html',\n        'dojo/i18n!./Find/nls/resource',\n\n        'dijit/form/Form',\n        'dijit/form/DropDownButton',\n        'dijit/TooltipDialog',\n        'dijit/form/FilteringSelect',\n        'dijit/form/ValidationTextBox',\n        'dijit/form/CheckBox',\n        'xstyle/css!./Find/css/Find.css'\n    ], function (\n        declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, domConstruct, lang, array, on, keys, domStyle, Memory,\n        OnDemandGrid, Selection, Keyboard, ColumnResizer, GraphicsLayer, symbolUtils, graphicsUtils, FindTask, FindParameters, Extent,\n        FindTemplate, i18n\n    ) {\n        return declare(\n            [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\n                widgetsInTemplate: true,\n                templateString: FindTemplate,\n                baseClass: 'gis_AdvancedFindDijit',\n                i18n: i18n,\n                spatialReference: null,\n                showOptionsButton: false,\n                zoomOptions: {\n                    select: true,\n                    deselect: false\n                },\n                defaultResultsSymbols: {\n                    point: {\n                        type: 'esriSMS',\n                        style: 'esriSMSCircle',\n                        size: 25,\n                        color: [0, 255, 255, 32],\n                        angle: 0,\n                        xoffset: 0,\n                        yoffset: 0,\n                        outline: {\n                            type: 'esriSLS',\n                            style: 'esriSLSSolid',\n                            color: [0, 255, 255, 255],\n                            width: 2\n                        }\n                    },\n                    polyline: {\n                        type: 'esriSLS',\n                        style: 'esriSLSSolid',\n                        color: [0, 255, 255, 255],\n                        width: 3\n                    },\n                    polygon: {\n                        type: 'esriSFS',\n                        style: 'esriSFSSolid',\n                        color: [0, 255, 255, 32],\n                        outline: {\n                            type: 'esriSLS',\n                            style: 'esriSLSSolid',\n                            color: [0, 255, 255, 255],\n                            width: 3\n                        }\n                    }\n                },\n                defaultSelectionSymbols: {\n                    point: {\n                        type: 'esriSMS',\n                        style: 'esriSMSCircle',\n                        size: 25,\n                        color: [4, 156, 219, 32],\n                        angle: 0,\n                        xoffset: 0,\n                        yoffset: 0,\n                        outline: {\n                            type: 'esriSLS',\n                            style: 'esriSLSSolid',\n                            color: [4, 156, 219, 255],\n                            width: 2\n                        }\n                    },\n                    polyline: {\n                        type: 'esriSLS',\n                        style: 'esriSLSSolid',\n                        color: [4, 156, 219, 255],\n                        width: 3\n                    },\n                    polygon: {\n                        type: 'esriSFS',\n                        style: 'esriSFSSolid',\n                        color: [4, 156, 219, 32],\n                        outline: {\n                            type: 'esriSLS',\n                            style: 'esriSLSSolid',\n                            color: [4, 156, 219, 255],\n                            width: 3\n                        }\n                    }\n                },\n                postCreate: function () {\n                    this.inherited(arguments);\n                    if (this.showOptionsButton) {\n                        domStyle.set(this.optionsDropDownDijit.domNode, 'display', 'inline-block');\n                    }\n                    this.initializeGlobalVariables();\n                    this.addKeyUpHandlerToSearchInput();\n                    this.initializeQueries();\n                    this.updateSearchPrompt();\n                },\n                initializeGlobalVariables: function () {\n                    this.queryIdx = 0;\n                    this.currentQueryEventHandlers = [];\n                    this.gridColumns = null;\n                    if (!this.selectionMode) {\n                        this.selectionMode = 'single';\n                    }\n                    if (!this.zoomExtentFactor) {\n                        this.zoomExtentFactor = 1.5;\n                    }\n                    if (!this.spatialReference) {\n                        this.spatialReference = this.map.spatialReference.wkid;\n                    }\n                    if (!this.pointExtentSize) {\n                        this.pointExtentSize = this.spatialReference === 4326 ? 0.0001 : 25;\n                    }\n                },\n                addKeyUpHandlerToSearchInput: function () {\n                    this.own(\n                        on(\n                            this.searchTextDijit, 'keyup', lang.hitch(\n                                this, function (evt) {\n                                    if (evt.keyCode === keys.ENTER) {\n                                        this.search();\n                                    }\n                                }\n                            )\n                        )\n                    );\n                },\n                initializeQueries: function () {\n                    var k = 0,\n                        queryLen = this.queries.length;\n                    for (k = 0; k < queryLen; k++) {\n                        this.queries[k].id = k;\n                    }\n                    this.querySelectDom.style.display = 'none';\n                    if (queryLen > 1) {\n                        var queryStore = new Memory({\n                            data: this.queries\n                        });\n                        this.querySelectDijit.set('store', queryStore);\n                        this.querySelectDijit.set('value', this.queryIdx);\n                        this.querySelectDom.style.display = 'block';\n                    }\n                },\n                search: function () {\n                    if (this.userInputIsInvalid()) {\n                        this.displayInvalidUserInputMessage();\n                        return;\n                    }\n                    if (this.queryConfigurationIsInvalid()) {\n                        this.displayInvalidQueryConfigurationMessage();\n                        return;\n                    }\n                    this.createOrResetResultsGrid();\n                    this.displayFindMessage(this.i18n.searching);\n                    this.executeFindTask();\n                },\n                executeFindTask: function () {\n                    var url = this.getQueryInput().query.url;\n                    var findParams = this.getFindParams();\n                    var findTask = new FindTask(url);\n                    findTask.execute(findParams, lang.hitch(this, this.showResults));\n                },\n                getQueryInput: function () {\n                    return {\n                        query: this.queries[this.queryIdx] || {},\n                        searchText: this.searchTextDijit.get('value')\n                    };\n                },\n                queryConfigurationIsInvalid: function () {\n                    var query = this.getQueryInput().query;\n                    if (!query.url || !query.searchFields || !query.layerIds) {\n                        return true;\n                    }\n                    return false;\n                },\n                userInputIsInvalid: function () {\n                    var userInput = this.getQueryInput().searchText;\n                    if (userInput.length === 0 || this.userInputLessThanMinLength()) {\n                        return true;\n                    }\n                    return false;\n                },\n                userInputLessThanMinLength: function () {\n                    var queryInput = this.getQueryInput();\n                    if (queryInput.query.minChars && (queryInput.searchText.length < queryInput.query.minChars)) {\n                        return true;\n                    }\n                    return false;\n                },\n                displayInvalidQueryConfigurationMessage: function () {\n                    this.displayFindMessage('There is a problem with the query configuration.');\n                    return;\n                },\n                displayInvalidUserInputMessage: function () {\n                    var minChars = this.getQueryInput().query.minChars;\n                    this.displayFindMessage('You must enter at least ' + minChars + ' characters.');\n                    return;\n                },\n                displayFindMessage: function (message) {\n                    domConstruct.empty(this.findResultsNode);\n                    this.findResultsNode.innerHTML = message;\n                    this.findResultsNode.style.display = 'block';\n                },\n                getFindParams: function () {\n                    var queryInput = this.getQueryInput();\n                    var findParams = new FindParameters();\n                    findParams.returnGeometry = true;\n                    findParams.layerIds = queryInput.query.layerIds;\n                    findParams.searchFields = queryInput.query.searchFields;\n                    findParams.layerDefinitions = queryInput.query.layerDefs;\n                    findParams.searchText = queryInput.searchText;\n                    findParams.contains = !this.containsSearchText.checked;\n                    findParams.outSpatialReference = {\n                        wkid: this.spatialReference\n                    };\n                    return findParams;\n                },\n                createOrResetResultsGrid: function () {\n                    if (!this.resultsGrid) {\n                        this.createResultsStore();\n                        this.createResultsGrid();\n                        this.attachStandardEventHandlersToResultsGrid();\n                    }\n                    this.clearResultsGrid();\n                    this.clearFeatures();\n                    this.resetResultsGridColumns();\n                    this.resetResultsGridSort();\n                    this.resetGridSelectionMode();\n                    this.attachCustomEventHandlersToResultsGrid();\n                },\n                createResultsStore: function () {\n                    if (!this.resultsStore) {\n                        this.resultsStore = new Memory({\n                            idProperty: 'id',\n                            data: []\n                        });\n                    }\n                },\n                createResultsGrid: function () {\n                    var Grid = declare([OnDemandGrid, Keyboard, Selection, ColumnResizer]);\n                    this.resultsGrid = new Grid({\n                        selectionMode: this.selectionMode,\n                        cellNavigation: false,\n                        showHeader: true,\n                        store: this.resultsStore\n                    }, this.findResultsGrid);\n                    this.resultsGrid.startup();\n                },\n                resetResultsGridColumns: function () {\n                    if (!this.resultsGrid) {\n                        return;\n                    }\n                    var columns = this.queries[this.queryIdx].gridColumns || {\n                        layerName: 'Layer',\n                        foundFieldName: 'Field',\n                        value: 'Result'\n                    };\n                    if (columns instanceof Array) {\n                        columns = array.filter(\n                            columns, function (column) {\n                                if (typeof column.visible === 'undefined') {\n                                    column.visible = true;\n                                }\n                                return column.visible;\n                            }\n                        );\n                    }\n                    this.resultsGrid.setColumns(columns);\n                },\n                resetResultsGridSort: function () {\n                    if (!this.resultsGrid) {\n                        return;\n                    }\n                    var sort = this.queries[this.queryIdx].sort || [\n                        {\n                            attribute: 'value',\n                            descending: false\n                            }\n                        ];\n                    this.resultsGrid.set('sort', sort);\n                },\n                resetGridSelectionMode: function () {\n                    if (!this.resultsGrid) {\n                        return;\n                    }\n                    var selectionMode = this.queries[this.queryIdx].selectionMode || this.selectionMode;\n                    this.resultsGrid.set('selectionMode', selectionMode);\n                },\n                attachStandardEventHandlersToResultsGrid: function () {\n                    if (!this.resultsGrid) {\n                        return;\n                    }\n                    this.own(\n                        this.resultsGrid.on('dgrid-select', lang.hitch(this, 'onResultsGridSelect'))\n                    );\n                    this.own(\n                        this.resultsGrid.on('dgrid-deselect', lang.hitch(this, 'onResultsGridDeselect'))\n                    );\n                    this.own(\n                        this.resultsGrid.on('.dgrid-row:dblclick', lang.hitch(this, 'onResultsGridRowClick'))\n                    );\n                },\n                attachCustomEventHandlersToResultsGrid: function () {\n                    if (!this.resultsGrid) {\n                        return;\n                    }\n                    array.forEach(this.currentQueryEventHandlers, function (handler) {\n                        handler.handle.remove();\n                    });\n                    var queryEventHandlers = this.queries[this.queryIdx].customGridEventHandlers || [];\n                    array.forEach(queryEventHandlers, lang.hitch(this, function (handler) {\n                        handler.handle = this.resultsGrid.on(handler.event, lang.hitch(this, handler.handler));\n                    }));\n                    this.currentQueryEventHandlers = queryEventHandlers;\n                },\n                showResults: function (results) {\n                    var resultText = this.i18n.noResultsLabel;\n                    this.results = results;\n                    if (this.results.length > 0) {\n                        var s = (this.results.length === 1) ? '' : this.i18n.resultsLabel.multipleResultsSuffix;\n                        resultText = this.results.length + ' ' + this.i18n.resultsLabel.labelPrefix + s + ' ' + this.i18n.resultsLabel.labelSuffix;\n                        this.createGraphicsLayerAndSymbols();\n                        this.parseGridColumnProperties();\n                        this.addResultsToGraphicsLayer();\n                        this.zoomToGraphics(this.graphicsLayer.graphics);\n                        this.showResultsGrid();\n                    }\n                    this.displayFindMessage(resultText);\n                },\n                createGraphicsLayerAndSymbols: function () {\n                    if (!this.graphicsLayer) {\n                        this.graphicsLayer = this.createGraphicsLayer();\n                    }\n                    if (!this.graphicsSymbols) {\n                        this.graphicsSymbols = this.createGraphicsSymbols();\n                    }\n                },\n                createGraphicsLayer: function () {\n                    var graphicsLayer = new GraphicsLayer({\n                        id: this.id + '_findGraphics',\n                        title: 'Find'\n                    });\n                    graphicsLayer.on('click', lang.hitch(this, 'onGraphicsLayerClick'));\n                    this.map.addLayer(graphicsLayer);\n                    return graphicsLayer;\n                },\n                onGraphicsLayerClick: function (event) {\n                    var zoomOnSelect = this.zoomOptions.select;\n                    this.zoomOptions.select = false;\n                    var row = this.resultsGrid.row(event.graphic.storeid);\n                    this.resultsGrid.select(row);\n                    this.resultsGrid.focus(row.element);\n                    row.element.focus();\n                    this.zoomOptions.select = zoomOnSelect;\n                },\n                createGraphicsSymbols: function () {\n                    var graphicSymbols = {}, resultSymbolDefinitions, selectionSymbolDefinitions;\n                    resultSymbolDefinitions = lang.mixin(this.defaultResultsSymbols, this.resultsSymbols || {});\n                    graphicSymbols.resultsSymbols = {};\n                    graphicSymbols.resultsSymbols.point = symbolUtils.fromJson(resultSymbolDefinitions.point);\n                    graphicSymbols.resultsSymbols.polyline = symbolUtils.fromJson(resultSymbolDefinitions.polyline);\n                    graphicSymbols.resultsSymbols.polygon = symbolUtils.fromJson(resultSymbolDefinitions.polygon);\n                    selectionSymbolDefinitions = lang.mixin(\n                        this.defaultSelectionSymbols, this.selectionSymbols || {}\n                    );\n                    graphicSymbols.selectionSymbols = {};\n                    graphicSymbols.selectionSymbols.point = symbolUtils.fromJson(selectionSymbolDefinitions.point);\n                    graphicSymbols.selectionSymbols.polyline = symbolUtils.fromJson(selectionSymbolDefinitions.polyline);\n                    graphicSymbols.selectionSymbols.polygon = symbolUtils.fromJson(selectionSymbolDefinitions.polygon);\n                    return graphicSymbols;\n                },\n                parseGridColumnProperties: function () {\n                    if (this.queries[this.queryIdx].gridColumns) {\n                        array.forEach(\n                            this.results, function (result) {\n                                array.forEach(\n                                    this.queries[this.queryIdx].gridColumns, function (column) {\n                                        var shouldGetValueFromAttributes = function (column, result) {\n                                            if (column.field && !result.hasOwnProperty(column.field) && result.feature.attributes.hasOwnProperty(column.field)) {\n                                                return true;\n                                            }\n                                            return false;\n                                        };\n                                        var shouldGetValueFromGetFunction = function (column, result) {\n                                            if (column.field && !result.hasOwnProperty(column.field) && column.get) {\n                                                return true;\n                                            }\n                                            return false;\n                                        };\n                                        if (shouldGetValueFromAttributes(column, this)) {\n                                            this[column.field] = this.feature.attributes[column.field];\n                                        } else if (shouldGetValueFromGetFunction(column, this)) {\n                                            this[column.field] = column.get(this);\n                                        }\n                                    }, result\n                                );\n                            }, this\n                        );\n                    }\n                },\n                addResultsToGraphicsLayer: function () {\n                    var unique = 0;\n                    array.forEach(\n                        this.results, function (result) {\n                            result.id = unique;\n                            result.feature.storeid = result.id;\n                            unique++;\n                            this.setGraphicSymbol(result.feature, false);\n                            this.graphicsLayer.add(result.feature);\n                        }, this\n                    );\n                },\n                showResultsGrid: function () {\n                    var queryInput = this.getQueryInput();\n                    this.resultsGrid.store.setData(this.results);\n                    this.resultsGrid.refresh();\n                    var lyrDisplay = 'block';\n                    if (queryInput.query.layerIds.length === 1) {\n                        lyrDisplay = 'none';\n                    }\n                    this.resultsGrid.styleColumn('layerName', 'display:' + lyrDisplay);\n                    if (queryInput.query && queryInput.query.hideGrid !== true) {\n                        this.findResultsGrid.style.display = 'block';\n                    }\n                },\n                onResultsGridSelect: function (event) {\n                    array.forEach(\n                        event.rows, lang.hitch(\n                            this, function (row) {\n                                var feature = row.data.feature;\n                                this.setGraphicSymbol(feature, true);\n                                if (feature && feature.getDojoShape()) {\n                                    feature.getDojoShape().moveToFront();\n                                }\n                            }\n                        )\n                    );\n                    this.graphicsLayer.redraw();\n                    if (this.zoomOptions.select) {\n                        this.zoomToSelectedGraphics();\n                    }\n                },\n                onResultsGridDeselect: function (event) {\n                    array.forEach(\n                        event.rows, lang.hitch(\n                            this, function (row) {\n                                var feature = row.data.feature;\n                                this.setGraphicSymbol(feature, false);\n                            }\n                        )\n                    );\n                    this.graphicsLayer.redraw();\n                    if (this.zoomOptions.deselect) {\n                        this.zoomToSelectedGraphics();\n                    }\n                },\n                onResultsGridRowClick: function (event) {\n                    var row = this.resultsGrid.row(event);\n                    var feature = row.data.feature;\n                    setTimeout(lang.hitch(this, function () {\n                        if (this.resultsGrid.selection.hasOwnProperty(row.id)) {\n                            this.zoomToGraphics([feature]);\n                        }\n                    }), 100);\n                },\n                setGraphicSymbol: function (graphic, isSelected) {\n                    var symbol = isSelected ? this.graphicsSymbols.selectionSymbols[graphic.geometry.type] : this.graphicsSymbols.resultsSymbols[graphic.geometry.type];\n                    graphic.setSymbol(symbol);\n                },\n                zoomToSelectedGraphics: function () {\n                    var selectedGraphics = [];\n                    var selection = this.resultsGrid.selection;\n                    for (var id in selection) {\n                        if (selection.hasOwnProperty(id)) {\n                            selectedGraphics.push(this.resultsGrid.row(id).data.feature);\n                        }\n                    }\n                    if (selectedGraphics.length === 0) {\n                        return;\n                    }\n                    this.zoomToGraphics(selectedGraphics);\n                },\n                zoomToGraphics: function (graphics) {\n                    var zoomExtent = null;\n                    if (graphics.length > 1) {\n                        zoomExtent = graphicsUtils.graphicsExtent(graphics);\n                    } else if (graphics.length === 1) {\n                        zoomExtent = this.getExtentFromGraphic(graphics[0]);\n                    }\n                    if (zoomExtent) {\n                        this.setMapExtent(zoomExtent);\n                    }\n                },\n                getExtentFromGraphic: function (graphic) {\n                    var extent = null;\n                    switch (graphic.geometry.type) {\n                    case 'point':\n                        extent = this.getExtentFromPoint(graphic);\n                        break;\n                    default:\n                        extent = graphicsUtils.graphicsExtent([graphic]);\n                        break;\n                    }\n                    return extent;\n                },\n                getExtentFromPoint: function (point) {\n                    var sz = this.pointExtentSize; // hack\n                    var pointGeometry = point.geometry;\n                    return new Extent({\n                        'xmin': pointGeometry.x - sz,\n                        'ymin': pointGeometry.y - sz,\n                        'xmax': pointGeometry.x + sz,\n                        'ymax': pointGeometry.y + sz,\n                        'spatialReference': {\n                            wkid: this.spatialReference\n                        }\n                    });\n                },\n                setMapExtent: function (extent) {\n                    this.map.setExtent(extent.expand(this.zoomExtentFactor));\n                },\n                clearResults: function () {\n                    this.results = null;\n                    this.clearResultsGrid();\n                    this.clearFeatures();\n                    this.searchFormDijit.reset();\n                    this.querySelectDijit.setValue(this.queryIdx);\n                    domConstruct.empty(this.findResultsNode);\n                },\n                clearResultsGrid: function () {\n                    if (this.resultStore) {\n                        this.resultsStore.setData([]);\n                    }\n                    if (this.resultsGrid) {\n                        this.resultsGrid.refresh();\n                    }\n                    this.findResultsNode.style.display = 'none';\n                    this.findResultsGrid.style.display = 'none';\n                },\n                clearFeatures: function () {\n                    if (this.graphicsLayer) {\n                        this.graphicsLayer.clear();\n                    }\n                },\n                _onQueryChange: function (queryIdx) {\n                    if (queryIdx >= 0 && queryIdx < this.queries.length) {\n                        this.queryIdx = queryIdx;\n                        this.updateSearchPrompt();\n                    }\n                },\n                updateSearchPrompt: function () {\n                    var prompt = this.queries[this.queryIdx].prompt || i18n.searchText.placeholder;\n                    this.searchTextDijit.set('placeholder', prompt);\n                    this.searchTextDijit.set('value', null);\n                },\n                onZoomOptionsSelectChange: function (value) {\n                    this.zoomOptions.select = value;\n                },\n                onZoomOptionsDeselectChange: function (value) {\n                    this.zoomOptions.deselect = value;\n                }\n            }\n        );\n    }\n);"]}