{"version":3,"file":"Draw.js","sources":["Draw.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","lang","Color","Draw","GraphicsLayer","Graphic","SimpleRenderer","drawTemplate","UniqueValueRenderer","SimpleMarkerSymbol","SimpleLineSymbol","SimpleFillSymbol","FeatureLayer","topic","aspect","i18n","widgetsInTemplate","templateString","drawToolbar","mapClickMode","postCreate","this","inherited","arguments","map","on","hitch","createGraphicLayers","own","subscribe","parentWidget","toggleable","after","onLayoutChange","open","pointSymbol","STYLE_CIRCLE","STYLE_SOLID","polylineSymbol","STYLE_DASH","polygonSymbol","STYLE_DASHDOT","pointGraphics","id","title","pointRenderer","label","description","setRenderer","addLayer","polylineGraphics","polylineRenderer","polygonGraphics","layerDefinition","geometryType","fields","name","type","alias","domain","editable","nullable","featureSet","mode","MODE_SNAPSHOT","polygonRenderer","addValue","value","symbol","color","outline","width","style","drawPoint","disconnectMapClick","activate","POINT","drawModeTextNode","innerText","labels","point","drawCircle","CIRCLE","circle","drawLine","POLYLINE","polyline","drawFreehandLine","FREEHAND_POLYLINE","freehandPolyline","drawPolygon","POLYGON","polygon","drawFreehandPolygon","FREEHAND_POLYGON","freehandPolygon","publish","enableStopButtons","connectMapClick","disableStopButtons","onDrawToolbarDrawEnd","evt","deactivate","currentDrawModeNone","graphic","geometry","add","ren","clearGraphics","endDrawing","stopDrawing","clear","stopDrawingButton","set","eraseDrawingButton","noGraphics","graphics","length","setMapClickMode"],"mappings":"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","sourcesContent":["define([\n   'dojo/_base/declare',\n   'dijit/_WidgetBase',\n   'dijit/_TemplatedMixin',\n   'dijit/_WidgetsInTemplateMixin',\n   'dojo/_base/lang',\n   'dojo/_base/Color',\n   'esri/toolbars/draw',\n   'esri/layers/GraphicsLayer',\n   'esri/graphic',\n   'esri/renderers/SimpleRenderer',\n   'dojo/text!./Draw/templates/Draw.html',\n   'esri/renderers/UniqueValueRenderer',\n   'esri/symbols/SimpleMarkerSymbol',\n   'esri/symbols/SimpleLineSymbol',\n   'esri/symbols/SimpleFillSymbol',\n   'esri/layers/FeatureLayer',\n   'dojo/topic',\n   'dojo/aspect',\n   'dojo/i18n!./Draw/nls/resource',\n\n   'dijit/form/Button',\n   'xstyle/css!./Draw/css/Draw.css',\n   'xstyle/css!./Draw/css/adw-icons.css'\n], function (declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, lang, Color, Draw, GraphicsLayer, Graphic, SimpleRenderer, drawTemplate, UniqueValueRenderer, SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol, FeatureLayer, topic, aspect, i18n) {\n\n    // main draw dijit\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\n        widgetsInTemplate: true,\n        templateString: drawTemplate,\n        i18n: i18n,\n        drawToolbar: null,\n        mapClickMode: null,\n        postCreate: function () {\n            this.inherited(arguments);\n            this.drawToolbar = new Draw(this.map);\n            this.drawToolbar.on('draw-end', lang.hitch(this, 'onDrawToolbarDrawEnd'));\n\n            this.createGraphicLayers();\n\n            this.own(topic.subscribe('mapClickMode/currentSet', lang.hitch(this, 'setMapClickMode')));\n            if (this.parentWidget && this.parentWidget.toggleable) {\n                this.own(aspect.after(this.parentWidget, 'toggle', lang.hitch(this, function () {\n                    this.onLayoutChange(this.parentWidget.open);\n                })));\n            }\n        },\n        createGraphicLayers: function () {\n            this.pointSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 10, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([255, 0, 0]), 1), new Color([255, 0, 0, 1.0]));\n            this.polylineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 1);\n            this.polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new Color([255, 0, 0]), 2), new Color([255, 255, 0, 0.0]));\n            this.pointGraphics = new GraphicsLayer({\n                id: 'drawGraphics_point',\n                title: 'Draw Graphics'\n            });\n            this.pointRenderer = new SimpleRenderer(this.pointSymbol);\n            this.pointRenderer.label = 'User drawn points';\n            this.pointRenderer.description = 'User drawn points';\n            this.pointGraphics.setRenderer(this.pointRenderer);\n            this.map.addLayer(this.pointGraphics);\n            this.polylineGraphics = new GraphicsLayer({\n                id: 'drawGraphics_line',\n                title: 'Draw Graphics'\n            });\n            this.polylineRenderer = new SimpleRenderer(this.polylineSymbol);\n            this.polylineRenderer.label = 'User drawn lines';\n            this.polylineRenderer.description = 'User drawn lines';\n            this.polylineGraphics.setRenderer(this.polylineRenderer);\n            this.map.addLayer(this.polylineGraphics);\n\n            this.polygonGraphics = new FeatureLayer({\n                layerDefinition: {\n                    geometryType: 'esriGeometryPolygon',\n                    fields: [{\n                        name: 'OBJECTID',\n                        type: 'esriFieldTypeOID',\n                        alias: 'OBJECTID',\n                        domain: null,\n                        editable: false,\n                        nullable: false\n                    }, {\n                        name: 'ren',\n                        type: 'esriFieldTypeInteger',\n                        alias: 'ren',\n                        domain: null,\n                        editable: true,\n                        nullable: false\n                    }]\n                },\n                featureSet: null\n            }, {\n                id: 'drawGraphics_poly',\n                title: 'Draw Graphics',\n                mode: FeatureLayer.MODE_SNAPSHOT\n            });\n            this.polygonRenderer = new UniqueValueRenderer(new SimpleFillSymbol(), 'ren', null, null, ', ');\n                this.polygonRenderer.addValue({\n                    value: 1,\n                    symbol: new SimpleFillSymbol({\n                    color: [255,170,0,255],\n                    outline: {\n                        color: [255,170,0,255],\n                        width: 1,\n                        type: 'esriSLS',\n                        style: 'esriSLSSolid'\n                    },\n                    type: 'esriSFS',\n                    style: 'esriSFSForwardDiagonal'\n                }),\n                label: 'User drawn polygons',\n                description: 'User drawn polygons'\n            });\n            this.polygonGraphics.setRenderer(this.polygonRenderer);\n            this.map.addLayer(this.polygonGraphics);\n        },\n        drawPoint: function () {\n            this.disconnectMapClick();\n            this.drawToolbar.activate(Draw.POINT);\n            this.drawModeTextNode.innerText = this.i18n.labels.point;\n        },\n        drawCircle: function () {\n            this.disconnectMapClick();\n            this.drawToolbar.activate(Draw.CIRCLE);\n            this.drawModeTextNode.innerText = this.i18n.labels.circle;\n        },\n        drawLine: function () {\n            this.disconnectMapClick();\n            this.drawToolbar.activate(Draw.POLYLINE);\n            this.drawModeTextNode.innerText = this.i18n.labels.polyline;\n        },\n        drawFreehandLine: function () {\n            this.disconnectMapClick();\n            this.drawToolbar.activate(Draw.FREEHAND_POLYLINE);\n            this.drawModeTextNode.innerText = this.i18n.labels.freehandPolyline;\n        },\n        drawPolygon: function () {\n            this.disconnectMapClick();\n            this.drawToolbar.activate(Draw.POLYGON);\n            this.drawModeTextNode.innerText = this.i18n.labels.polygon;\n        },\n        drawFreehandPolygon: function () {\n            this.disconnectMapClick();\n            this.drawToolbar.activate(Draw.FREEHAND_POLYGON);\n            this.drawModeTextNode.innerText = this.i18n.labels.freehandPolygon;\n        },\n        disconnectMapClick: function () {\n            topic.publish('mapClickMode/setCurrent', 'draw');\n            this.enableStopButtons();\n            // dojo.disconnect(this.mapClickEventHandle);\n            // this.mapClickEventHandle = null;\n        },\n        connectMapClick: function () {\n            topic.publish('mapClickMode/setDefault');\n            this.disableStopButtons();\n            // if (this.mapClickEventHandle === null) {\n            //     this.mapClickEventHandle = dojo.connect(this.map, 'onClick', this.mapClickEventListener);\n            // }\n        },\n        onDrawToolbarDrawEnd: function (evt) {\n            this.drawToolbar.deactivate();\n            this.drawModeTextNode.innerText = this.i18n.labels.currentDrawModeNone;\n            var graphic;\n            switch (evt.geometry.type) {\n                case 'point':\n                    graphic = new Graphic(evt.geometry);\n                    this.pointGraphics.add(graphic);\n                    break;\n                case 'polyline':\n                    graphic = new Graphic(evt.geometry);\n                    this.polylineGraphics.add(graphic);\n                    break;\n                case 'polygon':\n                    graphic = new Graphic(evt.geometry, null, {\n                        ren: 1\n                    });\n                    this.polygonGraphics.add(graphic);\n                    break;\n                default:\n            }\n            this.connectMapClick();\n        },\n        clearGraphics: function () {\n            this.endDrawing();\n            this.connectMapClick();\n            this.drawModeTextNode.innerText = 'None';\n        },\n        stopDrawing: function () {\n            this.drawToolbar.deactivate();\n            this.drawModeTextNode.innerText = 'None';\n            this.connectMapClick();\n        },\n        endDrawing: function () {\n            this.pointGraphics.clear();\n            this.polylineGraphics.clear();\n            this.polygonGraphics.clear();\n            this.drawToolbar.deactivate();\n            this.disableStopButtons();\n        },\n        disableStopButtons: function () {\n            this.stopDrawingButton.set( 'disabled', true );\n            this.eraseDrawingButton.set( 'disabled', !this.noGraphics() );\n        },\n        enableStopButtons: function () {\n            this.stopDrawingButton.set( 'disabled', false );\n            this.eraseDrawingButton.set( 'disabled', !this.noGraphics() );\n        },\n        noGraphics: function () {\n\n            if ( this.pointGraphics.graphics.length > 0 ) {\n                return true;\n            } else if ( this.polylineGraphics.graphics.length > 0 ) {\n                return true;\n            } else if ( this.polygonGraphics.graphics.length > 0 ) {\n                return true;\n            } else {\n                return false;\n            }\n            return false;\n\n        },\n        onLayoutChange: function (open) {\n            // end drawing on close of title pane\n            if (!open) {\n                //this.endDrawing();\n                if (this.mapClickMode === 'draw') {\n                    topic.publish('mapClickMode/setDefault');\n                }\n            }\n        },\n        setMapClickMode: function (mode) {\n            this.mapClickMode = mode;\n        }\n    });\n});"]}