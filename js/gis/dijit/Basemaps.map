{"version":3,"file":"Basemaps.js","sources":["Basemaps.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","lang","DropDownMenu","MenuItem","array","functional","template","BasemapGallery","i18n","templateString","widgetsInTemplate","mode","title","mapStartBasemap","basemapsToShow","validBasemaps","postCreate","this","inherited","arguments","currentBasemap","gallery","map","showArcGISBasemaps","basemaps","basemap","startup","menu","style","forEach","hasOwnProperty","menuItem","id","label","iconClass","onClick","hitch","select","setBasemap","ch","getChildren","c","set","addChild","dropDownButton","getBasemap"],"mappings":";;;;;AAAAA,QACI,qBACA,oBACA,wBACA,gCACA,kBACA,qBACA,iBACA,mBACA,wBACA,+CACA,4BACA,oCAEA,4BACA,0CACD,SAAUC,EAASC,EAAaC,EAAiBC,EAAyBC,EAAMC,EAAcC,EAAUC,EAAOC,EAAYC,EAAUC,EAAgBC,GAGpJ,MAAOX,IAASC,EAAaC,EAAiBC,IAC1CS,eAAgBH,EAChBI,mBAAmB,EACnBF,KAAMA,EACNG,KAAM,OACNC,MAAOJ,EAAKI,MAIZC,gBAAiB,UACjBC,gBAAiB,UAAW,YAAa,SAAU,OAAQ,OAAQ,SAAU,sBAAuB,OACpGC,iBACAC,WAAY,WACRC,KAAKC,UAAUC,WACfF,KAAKG,eAAiBH,KAAKJ,iBAAmB,KAE5B,WAAdI,KAAKN,OACLM,KAAKI,QAAU,GAAId,IACfe,IAAKL,KAAKK,IACVC,oBAAoB,EACpBC,SAAUnB,EAAWiB,IAAIL,KAAKO,SAAU,SAAUF,GAC9C,MAAOA,GAAIG,YAMnBR,KAAKI,QAAQK,WAGjBT,KAAKU,KAAO,GAAIzB,IACZ0B,MAAO,mBAIXxB,EAAMyB,QAAQZ,KAAKH,eAAgB,SAAUW,GACzC,GAAIR,KAAKO,SAASM,eAAeL,GAAU,CACvC,GAAIM,GAAW,GAAI5B,IACf6B,GAAIP,EACJQ,MAAOhB,KAAKO,SAASC,GAASb,MAC9BsB,UAAYT,GAAWR,KAAKJ,gBAAmB,eAAiB,YAChEsB,QAASlC,EAAKmC,MAAMnB,KAAM,WACtB,GAAIQ,IAAYR,KAAKG,eAAgB,CACjCH,KAAKG,eAAiBK,EACJ,WAAdR,KAAKN,KACLM,KAAKI,QAAQgB,OAAOZ,GAEpBR,KAAKK,IAAIgB,WAAWb,EAExB,IAAIc,GAAKtB,KAAKU,KAAKa,aACnBpC,GAAMyB,QAAQU,EAAI,SAAUE,GACpBA,EAAET,IAAMP,EACRgB,EAAEC,IAAI,YAAa,gBAEnBD,EAAEC,IAAI,YAAa,mBAMvCzB,MAAKU,KAAKgB,SAASZ,KAExBd,MAEHA,KAAK2B,eAAeF,IAAI,WAAYzB,KAAKU,OAE7CD,QAAS,WACLT,KAAKC,UAAUC,WACG,WAAdF,KAAKN,KACDM,KAAKK,IAAIuB,eAAiB5B,KAAKJ,iBAC/BI,KAAKI,QAAQgB,OAAOpB,KAAKJ,iBAGzBI,KAAKJ,iBACDI,KAAKK,IAAIuB,eAAiB5B,KAAKJ,iBAC/BI,KAAKK,IAAIgB,WAAWrB,KAAKJ","sourcesContent":["define([\n    'dojo/_base/declare',\n    'dijit/_WidgetBase',\n    'dijit/_TemplatedMixin',\n    'dijit/_WidgetsInTemplateMixin',\n    'dojo/_base/lang',\n    'dijit/DropDownMenu',\n    'dijit/MenuItem',\n    'dojo/_base/array',\n    'dojox/lang/functional',\n    'dojo/text!./Basemaps/templates/Basemaps.html',\n    'esri/dijit/BasemapGallery',\n    'dojo/i18n!./Basemaps/nls/resource',\n\n    'dijit/form/DropDownButton',\n    'xstyle/css!./Basemaps/css/Basemaps.css'\n], function (declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, lang, DropDownMenu, MenuItem, array, functional, template, BasemapGallery, i18n) {\n\n    // main basemap widget\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\n        templateString: template,\n        widgetsInTemplate: true,\n        i18n: i18n,\n        mode: 'agol',\n        title: i18n.title,\n        //baseClass: 'gis_Basemaps_Dijit',\n        //buttonClass: 'gis_Basemaps_Button',\n        //menuClass: 'gis_Basemaps_Menu',\n        mapStartBasemap: 'streets',\n        basemapsToShow: ['streets', 'satellite', 'hybrid', 'topo', 'gray', 'oceans', 'national-geographic', 'osm'],\n        validBasemaps: [],\n        postCreate: function () {\n            this.inherited(arguments);\n            this.currentBasemap = this.mapStartBasemap || null;\n\n            if (this.mode === 'custom') {\n                this.gallery = new BasemapGallery({\n                    map: this.map,\n                    showArcGISBasemaps: false,\n                    basemaps: functional.map(this.basemaps, function (map) {\n                        return map.basemap;\n                    })\n                });\n                // if (this.map.getBasemap() !== this.mapStartBasemap) { //based off the title of custom basemaps in viewer.js config\n                //     this.gallery.select(this.mapStartBasemap);\n                // }\n                this.gallery.startup();\n            }\n\n            this.menu = new DropDownMenu({\n                style: 'display: none;' //,\n                //baseClass: this.menuClass\n            });\n\n            array.forEach(this.basemapsToShow, function (basemap) {\n                if (this.basemaps.hasOwnProperty(basemap)) {\n                    var menuItem = new MenuItem({\n                        id: basemap,\n                        label: this.basemaps[basemap].title,\n                        iconClass: (basemap == this.mapStartBasemap) ? 'selectedIcon' : 'emptyIcon',\n                        onClick: lang.hitch(this, function () {\n                            if (basemap !== this.currentBasemap) {\n                                this.currentBasemap = basemap;\n                                if (this.mode === 'custom') {\n                                    this.gallery.select(basemap);\n                                } else {\n                                    this.map.setBasemap(basemap);\n                                }\n                                var ch = this.menu.getChildren();\n                                array.forEach(ch, function (c) {\n                                    if (c.id == basemap) {\n                                        c.set('iconClass', 'selectedIcon');\n                                    } else {\n                                        c.set('iconClass', 'emptyIcon');\n                                    }\n                                });\n                            }\n                        })\n                    });\n                    this.menu.addChild(menuItem);\n                }\n            }, this);\n\n            this.dropDownButton.set('dropDown', this.menu);\n        },\n        startup: function () {\n            this.inherited(arguments);\n            if (this.mode === 'custom') {\n                if (this.map.getBasemap() !== this.mapStartBasemap) { //based off the title of custom basemaps in viewer.js config\n                    this.gallery.select(this.mapStartBasemap);\n                }\n            } else {\n                if (this.mapStartBasemap) {\n                    if (this.map.getBasemap() !== this.mapStartBasemap) { //based off the agol basemap name\n                        this.map.setBasemap(this.mapStartBasemap);\n                    }\n                }\n            }\n        }\n    });\n});"]}