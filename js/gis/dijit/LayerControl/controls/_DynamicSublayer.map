{"version":3,"file":"_DynamicSublayer.js","sources":["_DynamicSublayer.js"],"names":["define","declare","lang","array","on","domClass","domStyle","domAttr","fx","html","Menu","MenuItem","topic","WidgetBase","TemplatedMixin","sublayerTemplate","i18n","_DynamicSublayer","control","sublayerInfo","menu","icons","templateString","_expandClickHandler","postCreate","this","inherited","arguments","checkNode","set","id","add","layer","indexOf","visibleLayers","_setSublayerCheckbox","hitch","get","_setVisibleLayers","_checkboxScaleRange","labelNode","name","_expandClick","minScale","maxScale","getMap","controlOptions","length","iconNode","contextMenuForWindow","targetNodeIds","leftClickToOpen","forEach","startup","_addMenuItem","menuItem","item","publish","subLayer","addChild","i","expandClickNode","expandNode","expandIconNode","wipeIn","node","duration","play","replace","collapse","expand","wipeOut","checked","unchecked","scale","getScale","min","max","remove"],"mappings":";;;;;AAAAA,QACI,qBACA,kBACA,mBACA,UACA,iBACA,iBACA,gBACA,UACA,YACA,aACA,iBACA,aACA,oBACA,wBACA,sCACA,+BACD,SACKC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEJ,GAAIC,GAAmBhB,GAASY,EAAYC,IACxCI,QAAS,KACTC,aAAc,KACdC,KAAM,KACNC,MAAO,KAEPC,eAAgBP,EAChBC,KAAMA,EACNO,oBAAqB,KACrBC,WAAY,WACRC,KAAKC,UAAUC,UACf,IAAIC,GAAYH,KAAKG,SACrBrB,GAAQsB,IAAID,EAAW,mBAAoBH,KAAKN,aAAaW,IAC7DzB,EAAS0B,IAAIH,EAAWH,KAAKP,QAAQc,MAAMF,GAAK,8BAC8B,KAA1E3B,EAAM8B,QAAQR,KAAKP,QAAQc,MAAME,cAAeT,KAAKN,aAAaW,IAClEL,KAAKU,sBAAqB,EAAMP,GAGhCH,KAAKU,sBAAqB,EAAOP,GAErCxB,EAAGwB,EAAW,QAAS1B,EAAKkC,MAAMX,KAAM,WACW,YAA3ClB,EAAQ8B,IAAIT,EAAW,gBACvBH,KAAKU,sBAAqB,EAAOP,GAEjCH,KAAKU,sBAAqB,EAAMP,GAEpCH,KAAKP,QAAQoB,oBACbb,KAAKc,yBAET9B,EAAKoB,IAAIJ,KAAKe,UAAWf,KAAKN,aAAasB,MAC3ChB,KAAKiB,gBAC8B,IAA/BjB,KAAKN,aAAawB,UAAiD,IAA/BlB,KAAKN,aAAayB,YACtDnB,KAAKc,sBACLd,KAAKP,QAAQc,MAAMa,SAASzC,GAAG,WAAYF,EAAKkC,MAAMX,KAAM,yBAG5DA,KAAKP,QAAQ4B,eAAe1B,MACxBK,KAAKP,QAAQ4B,eAAe1B,KAAK2B,SACrC1C,EAAS0B,IAAIN,KAAKe,UAAW,YAC7BnC,EAAS0B,IAAIN,KAAKuB,SAAU,YAC5BvB,KAAKL,KAAO,GAAIV,IACZuC,sBAAsB,EACtBC,eAAgBzB,KAAKe,WACrBW,iBAAiB,IAErBhD,EAAMiD,QAAQ3B,KAAKP,QAAQ4B,eAAe1B,KAAMlB,EAAKkC,MAAMX,KAAM,iBACjEA,KAAKL,KAAKiC,YAGlBC,aAAc,SAAUC,GAEpB,GAAIC,GAAQ,GAAI7C,GAAS4C,EACzBC,GAAK3B,IAAI,UAAW3B,EAAKkC,MAAMX,KAAM,WAC7Bb,EAAM6C,QAAQ,gBAAkBF,EAAS3C,OACrCoB,MAAOP,KAAKP,QAAQc,MACpB0B,SAAUjC,KAAKN,aACf6B,SAAUvB,KAAKuB,SACfO,SAAUC,OAGtB/B,KAAKL,KAAKuC,SAASH,IAGvBd,aAAc,WACV,GAAIkB,GAAInC,KAAKJ,KACbI,MAAKF,oBAAsBnB,EAAGqB,KAAKoC,gBAAiB,QAAS3D,EAAKkC,MAAMX,KAAM,WAC1E,GAAIqC,GAAarC,KAAKqC,WACdd,EAAWvB,KAAKsC,cACoB,UAAxCzD,EAAS+B,IAAIyB,EAAY,YACzBtD,EAAGwD,QACCC,KAAMH,EACNI,SAAU,MACXC,OACH9D,EAAS+D,QAAQpB,EAAUY,EAAES,SAAUT,EAAEU,UAEzC9D,EAAG+D,SACCN,KAAMH,EACNI,SAAU,MACXC,OACH9D,EAAS+D,QAAQpB,EAAUY,EAAEU,OAAQV,EAAES,eAKnDlC,qBAAsB,SAAUqC,EAAS5C,GACrCA,EAAYA,GAAaH,KAAKG,SAC9B,IAAIgC,GAAInC,KAAKJ,KACTmD,IACAjE,EAAQsB,IAAID,EAAW,eAAgB,WACvCvB,EAAS+D,QAAQxC,EAAWgC,EAAEY,QAASZ,EAAEa,aAEzClE,EAAQsB,IAAID,EAAW,eAAgB,aACvCvB,EAAS+D,QAAQxC,EAAWgC,EAAEa,UAAWb,EAAEY,WAInDjC,oBAAqB,WACjB,GAAI0B,GAAOxC,KAAKG,UACR8C,EAAQjD,KAAKP,QAAQc,MAAMa,SAAS8B,WACpCC,EAAMnD,KAAKN,aAAawB,SACxBkC,EAAMpD,KAAKN,aAAayB,QAChCvC,GAASyE,OAAOb,EAAM,kCACT,IAARW,GAAaF,EAAQE,GAAiB,IAARC,GAAqBA,EAARH,IAC5CrE,EAAS0B,IAAIkC,EAAM,mCAI/B,OAAOhD","sourcesContent":["define([\n    'dojo/_base/declare',\n    'dojo/_base/lang',\n    'dojo/_base/array',\n    'dojo/on',\n    'dojo/dom-class',\n    'dojo/dom-style',\n    'dojo/dom-attr',\n    'dojo/fx',\n    'dojo/html',\n    'dijit/Menu',\n    'dijit/MenuItem',\n    'dojo/topic',\n    'dijit/_WidgetBase',\n    'dijit/_TemplatedMixin',\n    'dojo/text!./templates/Sublayer.html',\n    'dojo/i18n!./../nls/resource'\n], function (\n        declare,\n        lang,\n        array,\n        on,\n        domClass,\n        domStyle,\n        domAttr,\n        fx,\n        html,\n        Menu,\n        MenuItem,\n        topic,\n        WidgetBase,\n        TemplatedMixin,\n        sublayerTemplate,\n        i18n\n        ) {\n    var _DynamicSublayer = declare([WidgetBase, TemplatedMixin], {\n        control: null,\n        sublayerInfo: null,\n        menu: null,\n        icons: null,\n        // ^args\n        templateString: sublayerTemplate,\n        i18n: i18n,\n        _expandClickHandler: null,\n        postCreate: function () {\n            this.inherited(arguments);\n            var checkNode = this.checkNode;\n            domAttr.set(checkNode, 'data-sublayer-id', this.sublayerInfo.id);\n            domClass.add(checkNode, this.control.layer.id + '-layerControlSublayerCheck');\n            if (array.indexOf(this.control.layer.visibleLayers, this.sublayerInfo.id) !== -1) {\n                this._setSublayerCheckbox(true, checkNode);\n            } else {\n\n                this._setSublayerCheckbox(false, checkNode);\n            }\n            on(checkNode, 'click', lang.hitch(this, function () {\n                if (domAttr.get(checkNode, 'data-checked') === 'checked') {\n                    this._setSublayerCheckbox(false, checkNode);\n                } else {\n                    this._setSublayerCheckbox(true, checkNode);\n                }\n                this.control._setVisibleLayers();\n                this._checkboxScaleRange();\n            }));\n            html.set(this.labelNode, this.sublayerInfo.name);\n            this._expandClick();\n            if (this.sublayerInfo.minScale !== 0 || this.sublayerInfo.maxScale !== 0) {\n                this._checkboxScaleRange();\n                this.control.layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange'));\n            }\n            //set up menu\n            if (this.control.controlOptions.menu &&\n                    this.control.controlOptions.menu.length) {\n                domClass.add(this.labelNode, 'menuLink');\n                domClass.add(this.iconNode, 'menuLink');\n                this.menu = new Menu({\n                    contextMenuForWindow: false,\n                    targetNodeIds: [this.labelNode],\n                    leftClickToOpen: true\n                });\n                array.forEach(this.control.controlOptions.menu, lang.hitch(this, '_addMenuItem'));\n                this.menu.startup();\n            }\n        },\n        _addMenuItem: function (menuItem) {\n            //create the menu item\n            var item  = new MenuItem(menuItem);\n            item.set('onClick', lang.hitch(this, function () {\n                    topic.publish('LayerControl/' + menuItem.topic, {\n                        layer: this.control.layer,\n                        subLayer: this.sublayerInfo,\n                        iconNode: this.iconNode,\n                        menuItem: item\n                    });\n                }));\n            this.menu.addChild(item);\n        },\n        // add on event to expandClickNode\n        _expandClick: function () {\n            var i = this.icons;\n            this._expandClickHandler = on(this.expandClickNode, 'click', lang.hitch(this, function () {\n                var expandNode = this.expandNode,\n                        iconNode = this.expandIconNode;\n                if (domStyle.get(expandNode, 'display') === 'none') {\n                    fx.wipeIn({\n                        node: expandNode,\n                        duration: 300\n                    }).play();\n                    domClass.replace(iconNode, i.collapse, i.expand);\n                } else {\n                    fx.wipeOut({\n                        node: expandNode,\n                        duration: 300\n                    }).play();\n                    domClass.replace(iconNode, i.expand, i.collapse);\n                }\n            }));\n        },\n        // set checkbox based on layer so it's always in sync\n        _setSublayerCheckbox: function (checked, checkNode) {\n            checkNode = checkNode || this.checkNode;\n            var i = this.icons;\n            if (checked) {\n                domAttr.set(checkNode, 'data-checked', 'checked');\n                domClass.replace(checkNode, i.checked, i.unchecked);\n            } else {\n                domAttr.set(checkNode, 'data-checked', 'unchecked');\n                domClass.replace(checkNode, i.unchecked, i.checked);\n            }\n        },\n        // check scales and add/remove disabled classes from checkbox\n        _checkboxScaleRange: function () {\n            var node = this.checkNode,\n                    scale = this.control.layer.getMap().getScale(),\n                    min = this.sublayerInfo.minScale,\n                    max = this.sublayerInfo.maxScale;\n            domClass.remove(node, 'layerControlCheckIconOutScale');\n            if ((min !== 0 && scale > min) || (max !== 0 && scale < max)) {\n                domClass.add(node, 'layerControlCheckIconOutScale');\n            }\n        }\n    });\n    return _DynamicSublayer;\n});"]}