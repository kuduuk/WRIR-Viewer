{"version":3,"file":"_Control.js","sources":["_Control.js"],"names":["define","declare","lang","on","topic","domConst","domStyle","domClass","domAttr","fx","html","LayerMenu","template","_Control","templateString","controller","layer","layerTitle","controlOptions","layerMenu","icons","_reorderUp","_reorderDown","_scaleRangeHandler","_expandClickHandler","constructor","params","this","postCreate","inherited","arguments","loaded","_initialize","hitch","publish","source","error","destroy","_layerTypePreInit","_setLayerCheckbox","checkNode","set","labelNode","layerUpdateNode","noMenu","control","contextMenuForWindow","targetNodeIds","menuNode","leftClickToOpen","startup","remove","menu","menuClickNode","minScale","maxScale","_checkboxScaleRange","getMap","_layerTypeInit","expanded","sublayers","expandClickNode","click","_expandClick","i","expandNode","iconNode","expandIconNode","get","wipeIn","node","duration","play","replace","collapse","expand","wipeOut","_expandRemove","_setLayerVisibility","visible","hide","id","show","checked","unchecked","scale","getScale","min","max","add","_updateStart","_layerState","clone","visibleLayers","_updateEnd","_visibilityChange","r"],"mappings":";;;;;AAAAA,QACI,qBACA,kBAEA,UACA,aACA,qBACA,iBACA,iBACA,gBACA,UACA,YACA,yBACA,sCACD,SACCC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIC,GAAWZ,MACXa,eAAgBF,EAChBG,WAAY,KACZC,MAAO,KACPC,WAAY,cACZC,eAAgB,KAChBC,UAAW,KACXC,MAAO,KACPC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,oBAAqB,KACrBC,YAAa,SAAUC,GACfA,EAAOX,aACPY,KAAKP,MAAQM,EAAOX,WAAWK,QAGvCQ,WAAY,WAER,MADAD,MAAKE,UAAUC,WACVH,KAAKZ,WAQLY,KAAKX,WASNW,KAAKX,MAAMe,OACXJ,KAAKK,cAELL,KAAKX,MAAMb,GAAG,OAAQD,EAAK+B,MAAMN,KAAM,kBAXvCvB,EAAM8B,QAAQ,sBACVC,OAAQ,wBACRC,MAAO,iCAEXT,MAAKU,YAZLjC,EAAM8B,QAAQ,sBACVC,OAAQ,wBACRC,MAAO,sCAEXT,MAAKU,YAmBbL,YAAa,WAELL,KAAKW,mBACLX,KAAKW,mBAET,IAAItB,GAAQW,KAAKX,MACbE,EAAiBS,KAAKT,cAE1BS,MAAKY,kBAAkBvB,EAAOW,KAAKa,WAEnCrC,EAAGwB,KAAKa,UAAW,QAAStC,EAAK+B,MAAMN,KAAM,sBAAuBX,EAAOW,KAAKa,YAEhF9B,EAAK+B,IAAId,KAAKe,UAAWf,KAAKV,YAE9BD,EAAMb,GAAG,eAAgBD,EAAK+B,MAAMN,KAAM,WACtCrB,EAASmC,IAAId,KAAKgB,gBAAiB,UAAW,mBAElD3B,EAAMb,GAAG,aAAcD,EAAK+B,MAAMN,KAAM,WACpCrB,EAASmC,IAAId,KAAKgB,gBAAiB,UAAW,WAG7CzB,EAAe0B,UAAW,GAAQjB,KAAKZ,WAAW6B,UAAW,GAAUjB,KAAKZ,WAAW6B,UAAW,GAAQ1B,EAAe0B,UAAW,GACrIjB,KAAKR,UAAY,GAAIR,IACjBkC,QAASlB,KACTmB,sBAAsB,EACtBC,eAAgBpB,KAAKqB,UACrBC,iBAAiB,IAErBtB,KAAKR,UAAU+B,YAEf3C,EAAS4C,OAAOxB,KAAKqB,SAAU,6BAA+BrB,KAAKP,MAAMgC,MACzE9C,EAASmC,IAAId,KAAK0B,cAAe,SAAU,aAGxB,IAAnBrC,EAAMsC,UAAqC,IAAnBtC,EAAMuC,YAC9B5B,KAAK6B,sBACL7B,KAAKJ,mBAAqBP,EAAMyC,SAAStD,GAAG,WAAYD,EAAK+B,MAAMN,KAAM,yBAG7EA,KAAKX,MAAMb,GAAG,qBAAsBD,EAAK+B,MAAMN,KAAM,WAC1B,IAAnBX,EAAMsC,UAAqC,IAAnBtC,EAAMuC,UAC9B5B,KAAK6B,sBACL7B,KAAKJ,mBAAqBP,EAAMyC,SAAStD,GAAG,WAAYD,EAAK+B,MAAMN,KAAM,0BAEzEA,KAAK6B,sBACD7B,KAAKJ,qBACLI,KAAKJ,mBAAmB4B,SACxBxB,KAAKJ,mBAAqB,UAKtCI,KAAK+B,iBAGDxC,EAAeyC,UAAYzC,EAAe0C,WAC1CjC,KAAKkC,gBAAgBC,QAIzB9C,EAAMb,GAAG,eAAgBD,EAAK+B,MAAMN,KAAM,iBAC1CX,EAAMb,GAAG,aAAcD,EAAK+B,MAAMN,KAAM,eACxCX,EAAMb,GAAG,oBAAqBD,EAAK+B,MAAMN,KAAM,uBAGnDoC,aAAc,WACV,GAAIC,GAAIrC,KAAKP,KACbO,MAAKH,oBAAsBrB,EAAGwB,KAAKkC,gBAAiB,QAAS3D,EAAK+B,MAAMN,KAAM,WAC1E,GAAIsC,GAAatC,KAAKsC,WAClBC,EAAWvC,KAAKwC,cACwB,UAAxC7D,EAAS8D,IAAIH,EAAY,YACzBxD,EAAG4D,QACCC,KAAML,EACNM,SAAU,MACXC,OACHjE,EAASkE,QAAQP,EAAUF,EAAEU,SAAUV,EAAEW,UAEzClE,EAAGmE,SACCN,KAAML,EACNM,SAAU,MACXC,OACHjE,EAASkE,QAAQP,EAAUF,EAAEW,OAAQX,EAAEU,eAKnDG,cAAe,WACXtE,EAAS4C,OAAOxB,KAAKwC,gBAAiB,KAAMxC,KAAKP,MAAMuD,OAAQ,2BAC/DrE,EAASmC,IAAId,KAAKkC,gBAAiB,SAAU,WAC7CxD,EAASgC,QAAQV,KAAKsC,aAG1Ba,oBAAqB,SAAU9D,EAAOwB,GAC9BxB,EAAM+D,SACNpD,KAAKY,kBAAkBvB,EAAOwB,GAC9BxB,EAAMgE,OACN5E,EAAM8B,QAAQ,4BACV+C,GAAIjE,EAAMiE,GACVF,QAAS/D,EAAM+D,YAGnBpD,KAAKY,kBAAkBvB,EAAOwB,GAC9BxB,EAAMkE,OACN9E,EAAM8B,QAAQ,4BACV+C,GAAIjE,EAAMiE,GACVF,QAAS/D,EAAM+D,YAGA,IAAnB/D,EAAMsC,UAAqC,IAAnBtC,EAAMuC,WAC9B5B,KAAK6B,uBAIbjB,kBAAmB,SAAUvB,EAAOwB,GAChC,GAAIwB,GAAIrC,KAAKP,KACTJ,GAAM+D,SACNvE,EAAQiC,IAAID,EAAW,eAAgB,WACvCjC,EAASkE,QAAQjC,EAAWwB,EAAEmB,QAASnB,EAAEoB,aAEzC5E,EAAQiC,IAAID,EAAW,eAAgB,aACvCjC,EAASkE,QAAQjC,EAAWwB,EAAEoB,UAAWpB,EAAEmB,WAInD3B,oBAAqB,WACjB,GAAIc,GAAO3C,KAAKa,UACZxB,EAAQW,KAAKX,MACbqE,EAAQrE,EAAMyC,SAAS6B,WACvBC,EAAMvE,EAAMsC,SACZkC,EAAMxE,EAAMuC,QAChBhD,GAAS4C,OAAOmB,EAAM,kCACT,IAARiB,GAAaF,EAAQE,GAAiB,IAARC,GAAqBA,EAARH,IAC5C9E,EAASkF,IAAInB,EAAM,kCAI3BoB,aAAc,WAEV/D,KAAKgE,YAAczF,EAAK0F,OACpBb,QAASpD,KAAKX,MAAM+D,QACpBc,cAAelE,KAAKX,MAAM6E,eAAiB,QAInDC,WAAY,WAOR,MAAKnE,MAAKgE,YAAV,YAEIhE,KAAKgE,YAAc,OAK3BI,kBAAmB,SAAUC,IAEpBA,EAAEjB,SAA2D,cAAhDvE,EAAQ4D,IAAIzC,KAAKa,UAAW,kBAAsCwD,EAAEjB,SAA2D,YAAhDvE,EAAQ4D,IAAIzC,KAAKa,UAAW,kBACzHb,KAAKY,kBAAkBZ,KAAKX,MAAOW,KAAKa,aAIpD,OAAO3B","sourcesContent":["define([\n    'dojo/_base/declare',\n    'dojo/_base/lang',\n    //'dojo/_base/array',\n    'dojo/on',\n    'dojo/topic',\n    'dojo/dom-construct',\n    'dojo/dom-style',\n    'dojo/dom-class',\n    'dojo/dom-attr',\n    'dojo/fx',\n    'dojo/html',\n    './../plugins/LayerMenu',\n    'dojo/text!./templates/Control.html'\n], function (\n    declare,\n    lang,\n    //array,\n    on,\n    topic,\n    domConst,\n    domStyle,\n    domClass,\n    domAttr,\n    fx,\n    html,\n    LayerMenu,\n    template\n) {\n    var _Control = declare([], {\n        templateString: template, // widget template\n        controller: null, // LayerControl instance\n        layer: null, // the layer object\n        layerTitle: 'Layer Title', // default title\n        controlOptions: null, // control options\n        layerMenu: null, //the controls menu\n        icons: null,\n        _reorderUp: null, // used by LayerMenu\n        _reorderDown: null, // used by LayerMenu\n        _scaleRangeHandler: null, // handle for scale range awareness\n        _expandClickHandler: null, // the click handler for the expandNode\n        constructor: function (params) {\n            if (params.controller) {\n                this.icons = params.controller.icons;\n            } // if not you've got bigger problems\n        },\n        postCreate: function () {\n            this.inherited(arguments);\n            if (!this.controller) {\n                topic.publish('viewer/handleError', {\n                    source: 'LayerControl/_Control',\n                    error: 'controller option is required'\n                });\n                this.destroy();\n                return;\n            }\n            if (!this.layer) {\n                topic.publish('viewer/handleError', {\n                    source: 'LayerControl/_Control',\n                    error: 'layer option is required'\n                });\n                this.destroy();\n                return;\n            }\n\n            if (this.layer.loaded) {\n                this._initialize();\n            } else {\n                this.layer.on('load', lang.hitch(this, '_initialize'));\n            }\n        },\n        // initialize the control\n        _initialize: function () {\n            // an optional function in each control widget called before widget init\n            if (this._layerTypePreInit) {\n                this._layerTypePreInit();\n            }\n            var layer = this.layer,\n                controlOptions = this.controlOptions;\n            // set checkbox\n            this._setLayerCheckbox(layer, this.checkNode);\n            // wire up layer visibility\n            on(this.checkNode, 'click', lang.hitch(this, '_setLayerVisibility', layer, this.checkNode));\n            // set title\n            html.set(this.labelNode, this.layerTitle);\n            // wire up updating indicator\n            layer.on('update-start', lang.hitch(this, function () {\n                domStyle.set(this.layerUpdateNode, 'display', 'inline-block'); //font awesome display\n            }));\n            layer.on('update-end', lang.hitch(this, function () {\n                domStyle.set(this.layerUpdateNode, 'display', 'none');\n            }));\n            // create layer menu\n            if ((controlOptions.noMenu !== true && this.controller.noMenu !== true) || (this.controller.noMenu === true && controlOptions.noMenu === false)) {\n                this.layerMenu = new LayerMenu({\n                    control: this,\n                    contextMenuForWindow: false,\n                    targetNodeIds: [this.menuNode],\n                    leftClickToOpen: true\n                });\n                this.layerMenu.startup();\n            } else {\n                domClass.remove(this.menuNode, 'fa, layerControlMenuIcon, ' + this.icons.menu);\n                domStyle.set(this.menuClickNode, 'cursor', 'default');\n            }\n            // if layer has scales set\n            if (layer.minScale !== 0 || layer.maxScale !== 0) {\n                this._checkboxScaleRange();\n                this._scaleRangeHandler = layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange'));\n            }\n            // if layer scales change\n            this.layer.on('scale-range-change', lang.hitch(this, function () {\n                if (layer.minScale !== 0 || layer.maxScale !== 0) {\n                    this._checkboxScaleRange();\n                    this._scaleRangeHandler = layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange'));\n                } else {\n                    this._checkboxScaleRange();\n                    if (this._scaleRangeHandler) {\n                        this._scaleRangeHandler.remove();\n                        this._scaleRangeHandler = null;\n                    }\n                }\n            }));\n            // a function in each control widget for layer type specifics like legends and such\n            this._layerTypeInit();\n            // show expandNode\n            //   no harm if click handler wasn't created\n            if (controlOptions.expanded && controlOptions.sublayers) {\n                this.expandClickNode.click();\n            }\n            // esri layer's don't inherit from Stateful\n            //   connect to update events to handle \"watching\" layers\n            layer.on('update-start', lang.hitch(this, '_updateStart'));\n            layer.on('update-end', lang.hitch(this, '_updateEnd'));\n            layer.on('visibility-change', lang.hitch(this, '_visibilityChange'));\n        },\n        // add on event to expandClickNode\n        _expandClick: function () {\n            var i = this.icons;\n            this._expandClickHandler = on(this.expandClickNode, 'click', lang.hitch(this, function () {\n                var expandNode = this.expandNode,\n                    iconNode = this.expandIconNode;\n                if (domStyle.get(expandNode, 'display') === 'none') {\n                    fx.wipeIn({\n                        node: expandNode,\n                        duration: 300\n                    }).play();\n                    domClass.replace(iconNode, i.collapse, i.expand);\n                } else {\n                    fx.wipeOut({\n                        node: expandNode,\n                        duration: 300\n                    }).play();\n                    domClass.replace(iconNode, i.expand, i.collapse);\n                }\n            }));\n        },\n        // removes the icons and cursor:pointer from expandClickNode and destroys expandNode\n        _expandRemove: function () {\n            domClass.remove(this.expandIconNode, ['fa', this.icons.expand, 'layerControlToggleIcon']);\n            domStyle.set(this.expandClickNode, 'cursor', 'default');\n            domConst.destroy(this.expandNode);\n        },\n        // set layer visibility and update icon\n        _setLayerVisibility: function (layer, checkNode) {\n            if (layer.visible) {\n                this._setLayerCheckbox(layer, checkNode);\n                layer.hide();\n                topic.publish('layerControl/layerToggle', {\n                    id: layer.id,\n                    visible: layer.visible\n                });\n            } else {\n                this._setLayerCheckbox(layer, checkNode);\n                layer.show();\n                topic.publish('layerControl/layerToggle', {\n                    id: layer.id,\n                    visible: layer.visible\n                });\n            }\n            if (layer.minScale !== 0 || layer.maxScale !== 0) {\n                this._checkboxScaleRange();\n            }\n        },\n        // set checkbox based on layer so it's always in sync\n        _setLayerCheckbox: function (layer, checkNode) {\n            var i = this.icons;\n            if (layer.visible) {\n                domAttr.set(checkNode, 'data-checked', 'checked');\n                domClass.replace(checkNode, i.checked, i.unchecked);\n            } else {\n                domAttr.set(checkNode, 'data-checked', 'unchecked');\n                domClass.replace(checkNode, i.unchecked, i.checked);\n            }\n        },\n        // check scales and add/remove disabled classes from checkbox\n        _checkboxScaleRange: function () {\n            var node = this.checkNode,\n                layer = this.layer,\n                scale = layer.getMap().getScale(),\n                min = layer.minScale,\n                max = layer.maxScale;\n            domClass.remove(node, 'layerControlCheckIconOutScale');\n            if ((min !== 0 && scale > min) || (max !== 0 && scale < max)) {\n                domClass.add(node, 'layerControlCheckIconOutScale');\n            }\n        },\n        // anything the widget may need to do before update\n        _updateStart: function () {\n            // clone a layer state before layer updates for use after update\n            this._layerState = lang.clone({\n                visible: this.layer.visible,\n                visibleLayers: this.layer.visibleLayers || null\n            });\n        },\n        // anything the widget may need to do after update\n        _updateEnd: function () {\n            // how to handle external layer.setVisibleLayers() ???\n            //\n            // without topics to get/set sublayer state this will be challenging\n            // still up for debate...\n\n            // anything needing before update layer state\n            if (!this._layerState) {\n                // clear\n                this._layerState = null;\n                return;\n            }\n        },\n        // anything the widget may need to do after visibility change\n        _visibilityChange: function (r) {\n            // if the checkbox doesn't match layer visibility correct it by calling _setLayerCheckbox\n            if ((r.visible && domAttr.get(this.checkNode, 'data-checked') === 'unchecked') || (!r.visible && domAttr.get(this.checkNode, 'data-checked') === 'checked')) {\n                this._setLayerCheckbox(this.layer, this.checkNode);\n            }\n        }\n    });\n    return _Control;\n});"]}