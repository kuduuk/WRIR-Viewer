{"version":3,"file":"_DynamicFolder.js","sources":["_DynamicFolder.js"],"names":["define","declare","lang","array","on","domClass","domStyle","domAttr","fx","html","WidgetBase","TemplatedMixin","folderTemplate","_DynamicFolder","control","sublayerInfo","icons","templateString","_expandClickHandler","postCreate","this","inherited","arguments","checkNode","set","id","add","layer","indexOf","visibleLayers","_setSublayerCheckbox","hitch","get","_setVisibleLayers","_checkboxScaleRange","labelNode","name","_expandClick","minScale","maxScale","getMap","i","expandClickNode","expandNode","iconNode","expandIconNode","wipeIn","node","duration","play","replace","folderOpen","folder","wipeOut","checked","unchecked","scale","getScale","min","max","remove"],"mappings":";;;;;AAAAA,QACI,qBACA,kBACA,mBACA,UACA,iBACA,iBACA,gBACA,UACA,YACA,oBACA,wBACA,qCACD,SACCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIC,GAAkBZ,GAASS,EAAYC,IACvCG,QAAS,KACTC,aAAc,KACdC,MAAO,KAEPC,eAAgBL,EAChBM,oBAAqB,KACrBC,WAAY,WACRC,KAAKC,UAAUC,UACf,IAAIC,GAAYH,KAAKG,SACrBhB,GAAQiB,IAAID,EAAW,mBAAoBH,KAAKL,aAAaU,IAC7DpB,EAASqB,IAAIH,EAAWH,KAAKN,QAAQa,MAAMF,GAAK,8BAC8B,KAA1EtB,EAAMyB,QAAQR,KAAKN,QAAQa,MAAME,cAAeT,KAAKL,aAAaU,IAClEL,KAAKU,sBAAqB,EAAMP,GAEhCH,KAAKU,sBAAqB,EAAOP,GAErCnB,EAAGmB,EAAW,QAASrB,EAAK6B,MAAMX,KAAM,WACW,YAA3Cb,EAAQyB,IAAIT,EAAW,gBACvBH,KAAKU,sBAAqB,EAAOP,GAEjCH,KAAKU,sBAAqB,EAAMP,GAEpCH,KAAKN,QAAQmB,oBACbb,KAAKc,yBAETzB,EAAKe,IAAIJ,KAAKe,UAAWf,KAAKL,aAAaqB,MAC3ChB,KAAKiB,gBAC8B,IAA/BjB,KAAKL,aAAauB,UAAiD,IAA/BlB,KAAKL,aAAawB,YACtDnB,KAAKc,sBACLd,KAAKN,QAAQa,MAAMa,SAASpC,GAAG,WAAYF,EAAK6B,MAAMX,KAAM,0BAIpEiB,aAAc,WACV,GAAII,GAAIrB,KAAKJ,KACbI,MAAKF,oBAAsBd,EAAGgB,KAAKsB,gBAAiB,QAASxC,EAAK6B,MAAMX,KAAM,WAC1E,GAAIuB,GAAavB,KAAKuB,WAClBC,EAAWxB,KAAKyB,cACwB,UAAxCvC,EAAS0B,IAAIW,EAAY,YACzBnC,EAAGsC,QACCC,KAAMJ,EACNK,SAAU,MACXC,OACH5C,EAAS6C,QAAQN,EAAUH,EAAEU,WAAYV,EAAEW,UAE3C5C,EAAG6C,SACCN,KAAMJ,EACNK,SAAU,MACXC,OACH5C,EAAS6C,QAAQN,EAAUH,EAAEW,OAAQX,EAAEU,iBAKnDrB,qBAAsB,SAAUwB,EAAS/B,GACrCA,EAAYA,GAAaH,KAAKG,SAC9B,IAAIkB,GAAIrB,KAAKJ,KACTsC,IACA/C,EAAQiB,IAAID,EAAW,eAAgB,WACvClB,EAAS6C,QAAQ3B,EAAWkB,EAAEa,QAASb,EAAEc,aAEzChD,EAAQiB,IAAID,EAAW,eAAgB,aACvClB,EAAS6C,QAAQ3B,EAAWkB,EAAEc,UAAWd,EAAEa,WAInDpB,oBAAqB,WACjB,GAAIa,GAAO3B,KAAKG,UACZiC,EAAQpC,KAAKN,QAAQa,MAAMa,SAASiB,WACpCC,EAAMtC,KAAKL,aAAauB,SACxBqB,EAAMvC,KAAKL,aAAawB,QAC5BlC,GAASuD,OAAOb,EAAM,kCACT,IAARW,GAAaF,EAAQE,GAAiB,IAARC,GAAqBA,EAARH,IAC5CnD,EAASqB,IAAIqB,EAAM,mCAI/B,OAAOlC","sourcesContent":["define([\n    'dojo/_base/declare',\n    'dojo/_base/lang',\n    'dojo/_base/array',\n    'dojo/on',\n    'dojo/dom-class',\n    'dojo/dom-style',\n    'dojo/dom-attr',\n    'dojo/fx',\n    'dojo/html',\n    'dijit/_WidgetBase',\n    'dijit/_TemplatedMixin',\n    'dojo/text!./templates/Folder.html'\n], function (\n    declare,\n    lang,\n    array,\n    on,\n    domClass,\n    domStyle,\n    domAttr,\n    fx,\n    html,\n    WidgetBase,\n    TemplatedMixin,\n    folderTemplate\n) {\n    var _DynamicFolder =  declare([WidgetBase, TemplatedMixin], {\n        control: null,\n        sublayerInfo: null,\n        icons: null,\n        // ^args\n        templateString: folderTemplate,\n        _expandClickHandler: null,\n        postCreate: function () {\n            this.inherited(arguments);\n            var checkNode = this.checkNode;\n            domAttr.set(checkNode, 'data-sublayer-id', this.sublayerInfo.id);\n            domClass.add(checkNode, this.control.layer.id + '-layerControlSublayerCheck');\n            if (array.indexOf(this.control.layer.visibleLayers, this.sublayerInfo.id) !== -1) {\n                this._setSublayerCheckbox(true, checkNode);\n            } else {\n                this._setSublayerCheckbox(false, checkNode);\n            }\n            on(checkNode, 'click', lang.hitch(this, function () {\n                if (domAttr.get(checkNode, 'data-checked') === 'checked') {\n                    this._setSublayerCheckbox(false, checkNode);\n                } else {\n                    this._setSublayerCheckbox(true, checkNode);\n                }\n                this.control._setVisibleLayers();\n                this._checkboxScaleRange();\n            }));\n            html.set(this.labelNode, this.sublayerInfo.name);\n            this._expandClick();\n            if (this.sublayerInfo.minScale !== 0 || this.sublayerInfo.maxScale !== 0) {\n                this._checkboxScaleRange();\n                this.control.layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange'));\n            }\n        },\n        // add on event to expandClickNode\n        _expandClick: function () {\n            var i = this.icons;\n            this._expandClickHandler = on(this.expandClickNode, 'click', lang.hitch(this, function () {\n                var expandNode = this.expandNode,\n                    iconNode = this.expandIconNode;\n                if (domStyle.get(expandNode, 'display') === 'none') {\n                    fx.wipeIn({\n                        node: expandNode,\n                        duration: 300\n                    }).play();\n                    domClass.replace(iconNode, i.folderOpen, i.folder);\n                } else {\n                    fx.wipeOut({\n                        node: expandNode,\n                        duration: 300\n                    }).play();\n                    domClass.replace(iconNode, i.folder, i.folderOpen);\n                }\n            }));\n        },\n        // set checkbox based on layer so it's always in sync\n        _setSublayerCheckbox: function (checked, checkNode) {\n            checkNode = checkNode || this.checkNode;\n            var i = this.icons;\n            if (checked) {\n                domAttr.set(checkNode, 'data-checked', 'checked');\n                domClass.replace(checkNode, i.checked, i.unchecked);\n            } else {\n                domAttr.set(checkNode, 'data-checked', 'unchecked');\n                domClass.replace(checkNode, i.unchecked, i.checked);\n            }\n        },\n        // check scales and add/remove disabled classes from checkbox\n        _checkboxScaleRange: function () {\n            var node = this.checkNode,\n                scale = this.control.layer.getMap().getScale(),\n                min = this.sublayerInfo.minScale,\n                max = this.sublayerInfo.maxScale;\n            domClass.remove(node, 'layerControlCheckIconOutScale');\n            if ((min !== 0 && scale > min) || (max !== 0 && scale < max)) {\n                domClass.add(node, 'layerControlCheckIconOutScale');\n            }\n        }\n    });\n    return _DynamicFolder;\n});"]}