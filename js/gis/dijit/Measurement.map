{"version":3,"file":"Measurement.js","sources":["Measurement.js"],"names":["define","declare","_WidgetBase","Measurement","aspect","lang","domConstruct","topic","declaredClass","mapClickMode","postCreate","this","inherited","arguments","measure","map","defaultAreaUnit","defaultLengthUnit","create","placeAt","domNode","startup","after","hitch","own","subscribe","parentWidget","toggleable","onLayoutChange","open","checkMeasureTool","activeTool","disconnectMapClick","connectMapClick","publish","setMapClickMode","mode","setTool","clearResult"],"mappings":";;;;;AAAAA,QACI,qBACA,oBACA,yBACA,cACA,kBACA,qBACA,cACD,SAAUC,EAASC,EAAaC,EAAaC,EAAQC,EAAMC,EAAcC,GAExE,MAAON,IAASC,IACZM,cAAe,wBACfC,aAAc,KACdC,WAAY,WACRC,KAAKC,UAAUC,WACfF,KAAKG,QAAU,GAAIX,IACfY,IAAKJ,KAAKI,IACVC,gBAAiBL,KAAKK,gBACtBC,kBAAmBN,KAAKM,mBACzBX,EAAaY,OAAO,QAAQC,QAAQR,KAAKS,SAC5CT,KAAKG,QAAQO,UACbjB,EAAOkB,MAAMX,KAAKG,QAAS,UAAWT,EAAKkB,MAAMZ,KAAM,qBACvDP,EAAOkB,MAAMX,KAAKG,QAAS,YAAaT,EAAKkB,MAAMZ,KAAM,qBACzDA,KAAKa,IAAIjB,EAAMkB,UAAU,0BAA2BpB,EAAKkB,MAAMZ,KAAM,qBACjEA,KAAKe,cAAgBf,KAAKe,aAAaC,YACvChB,KAAKa,IAAIpB,EAAOkB,MAAMX,KAAKe,aAAc,SAAUrB,EAAKkB,MAAMZ,KAAM,WAChEA,KAAKiB,eAAejB,KAAKe,aAAaG,WAIlDC,iBAAkB,WAETnB,KAAKG,QAAQiB,YAA0C,KAA5BpB,KAAKG,QAAQiB,WAMf,YAAtBpB,KAAKF,cACLE,KAAKqB,qBANiB,YAAtBrB,KAAKF,cACLE,KAAKsB,mBASjBD,mBAAoB,WAChBzB,EAAM2B,QAAQ,0BAA2B,YAE7CD,gBAAiB,WACb1B,EAAM2B,QAAQ,4BAElBN,eAAgB,SAAUC,GAEjBA,GAA8B,YAAtBlB,KAAKF,cACdE,KAAKsB,mBAGbE,gBAAiB,SAAUC,GACvBzB,KAAKF,aAAe2B,EACP,YAATA,IACAzB,KAAKG,QAAQuB,QAAQ,QAAQ,GAC7B1B,KAAKG,QAAQuB,QAAQ,YAAY,GACjC1B,KAAKG,QAAQuB,QAAQ,YAAY,GACjC1B,KAAKG,QAAQwB","sourcesContent":["define([\n    'dojo/_base/declare',\n    'dijit/_WidgetBase',\n    'esri/dijit/Measurement',\n    'dojo/aspect',\n    'dojo/_base/lang',\n    'dojo/dom-construct',\n    'dojo/topic'\n], function (declare, _WidgetBase, Measurement, aspect, lang, domConstruct, topic) {\n\n    return declare([_WidgetBase], {\n        declaredClass: 'gis.dijit.Measurement',\n        mapClickMode: null,\n        postCreate: function () {\n            this.inherited(arguments);\n            this.measure = new Measurement({\n                map: this.map,\n                defaultAreaUnit: this.defaultAreaUnit,\n                defaultLengthUnit: this.defaultLengthUnit\n            }, domConstruct.create('div')).placeAt(this.domNode);\n            this.measure.startup();\n            aspect.after(this.measure, 'setTool', lang.hitch(this, 'checkMeasureTool'));\n            aspect.after(this.measure, 'closeTool', lang.hitch(this, 'checkMeasureTool'));\n            this.own(topic.subscribe('mapClickMode/currentSet', lang.hitch(this, 'setMapClickMode')));\n            if (this.parentWidget && this.parentWidget.toggleable) {\n                this.own(aspect.after(this.parentWidget, 'toggle', lang.hitch(this, function () {\n                    this.onLayoutChange(this.parentWidget.open);\n                })));\n            }\n        },\n        checkMeasureTool: function () {\n            // no measurement tool is active\n            if (!this.measure.activeTool || this.measure.activeTool === '') {\n                if (this.mapClickMode === 'measure') {\n                    this.connectMapClick();\n                }\n                // a measurement tool is active\n            } else {\n                if (this.mapClickMode !== 'measure') {\n                    this.disconnectMapClick();\n                }\n            }\n        },\n        disconnectMapClick: function () {\n            topic.publish('mapClickMode/setCurrent', 'measure');\n        },\n        connectMapClick: function () {\n            topic.publish('mapClickMode/setDefault');\n        },\n        onLayoutChange: function (open) {\n            // end measurement on close of title pane\n            if (!open && this.mapClickMode === 'measure') {\n                this.connectMapClick();\n            }\n        },\n        setMapClickMode: function (mode) {\n            this.mapClickMode = mode;\n            if (mode !== 'measure') {\n                this.measure.setTool('area', false);\n                this.measure.setTool('distance', false);\n                this.measure.setTool('location', false);\n                this.measure.clearResult();\n            }\n        }\n    });\n});"]}